<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | wipple's room]]></title>
  <link href="http://wipple.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://wipple.github.com/"/>
  <updated>2012-01-14T18:17:09+09:00</updated>
  <id>http://wipple.github.com/</id>
  <author>
    <name><![CDATA[wipple]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QFixHowmとOctopressを連携させてGitHubにブログを書く]]></title>
    <link href="http://wipple.github.com/blog/2012/01/14/2136/"/>
    <updated>2012-01-14T18:17:00+09:00</updated>
    <id>http://wipple.github.com/blog/2012/01/14/2136</id>
    <content type="html"><![CDATA[<p>二、三日試行錯誤してなんとかvimから離れずに、GitHubに作ったブログを簡単に更新できるようになったのでメモ。
WordPressをvimから更新するプラグインもあったのですが、僕の環境ではうまく動きませんでした。
はてなダイアリー用のプラグインもあったのですが、はてな記法を覚えるのが面倒でやめました。</p>

<hr />

<h2>必要なもの</h2>

<ul>
<li><a href="http://github.com">GitHubのアカウント</a></li>
<li><a href="http://octopress.org/">Octopress</a></li>
<li><a href="http://sites.google.com/site/fudist/Home/qfixhowm">QFixHowm</a></li>
</ul>


<h2>Octopressを使ってみる</h2>

<p>まず、以下の手順を踏んで、Octopressを使えるようにしておいて下さい。</p>

<ol>
<li>GitHubのアカウントを作成し、ブログ用に特別なレポジトリを作成する</li>
<li>RubyをインストールしてからOctopressを使えるようにする</li>
<li>ブログのタイトルなどを設定し、テスト記事を書いて投稿してみる</li>
</ol>


<p>以下のサイトを参考にすれば簡単に進めると思うのでここでは細かい手順は省略します。</p>

<ul>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></li>
<li><a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm">githubとjekyllとoctopressで作る簡単でモダンなブログ</a></li>
</ul>


<hr />

<h2>QFixHowmとの連携</h2>

<p>で、一度テスト記事を書いてみれば分かると思うのですが、Octopressは確かに便利なのは便利なのですが、
実はrakeが意外と面倒だったりします（まあvimshell使えばいいんですけど）。
で、QFixHowmをうまく連携させれば楽できるんじゃないのかと思いついて試行錯誤したQFixHowmの設定例がこれ↓</p>

<p><div><script src='https://gist.github.com/1606577.js?file='></script>
<noscript><pre><code>&quot; QFixHowm{{{
NeoBundle 'fuenor/qfixhowm'
&quot; QFixHowm関連の設定を無効に
let QFixHowm_Convert = 0
&quot; マップリーダー設定
let qfixmemo_mapleader = ','
&quot; 外部grep使用
let mygrepprg='grep'
&quot; ファイルフォーマット関係
let qfixmemo_fileencoding = 'utf-8'
let qfixmemo_fileformat = 'unix'
&quot; メモファイルの拡張子
let qfixmemo_ext = 'mkd'
&quot; qfixmemoのファイルタイプ指定を無効
let qfixmemo_filetype = ''
&quot; 自動整形
let qfixmemo_use_keyword = 0
let qfixmemo_use_addtitle = 0
let qfixmemo_use_addtime = 0
let qfixmemo_use_updatetime = 1
let qfixmemo_use_deletenulllines = 0
&quot; メインの設定
function! QFixHowmEnvMain()
    let g:qfixmemo_dir = '~/qfixmemo'
    let g:QFixMRU_RootDir = '~/qfixmemo'
    let g:QFixMRU_Filename = '~/qfixmemo/mainmru'
    let g:qfixmemo_timeformat = '[%Y-%m-%d %H:%M]'
    let g:qfixmemo_filename = '%Y/%m/%Y-%m-%d-%H%M%S'
    let g:qfixmemo_template = ['%TITLE% ', &quot;&quot;]
    let g:qfixmemo_title = '#'
    let g:qfixmemo_timeformat_regxp = '^\[\d\{4}-\d\{2}\d\{2} \d\{2}:\d\{2}\]'
    let g:qfixmemo_timestamp_regxp = g:qfixmemo_timeformat_regxp
    let g:qfixmemo_template_keycmd = &quot;$a&quot;
    let g:QFixMRU_Title = {}
    let g:QFixMRU_Title['mkd'] = '^#'
    echo g:qfixmemo_dir
endfunction
&quot; ブログ作成用(octopress)の設定
function! QFixHowmEnvBlog()
    let g:qfixmemo_dir = '~/src/octopress/source/_posts'
    let g:QFixMRU_RootDir = '~/src/octopress/source/_posts'
    let g:QFixMRU_Filename = '~/qfixmemo/blogmru'
    let g:qfixmemo_timeformat = 'date: %Y-%m-%d %H:%M'
    let g:qfixmemo_filename = '%Y-%m-%d-%H%M'
    let g:qfixmemo_template =
                \ ['---', 'layout: post', '%TITLE% ', '%DATE%',
                \ 'comments: true', 'categories: ', '---', '']
    let g:qfixmemo_title = 'title:'
    let g:qfixmemo_timeformat_regxp = '^date: \d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}'
    let g:qfixmemo_timestamp_regxp = g:qfixmemo_timeformat_regxp
    let g:qfixmemo_template_keycmd = &quot;2j$a&quot;
    let g:QFixMRU_Title = {}
    let g:QFixMRU_Title['mkd'] = '^title:'
    echo g:qfixmemo_dir
endfunction
&quot; キーマップ
nnoremap qm :&lt;C-u&gt;call QFixHowmEnvMain()&lt;CR&gt;
nnoremap qb :&lt;C-u&gt;call QFixHowmEnvBlog()&lt;CR&gt;
&quot; GitHubにポスト
nnoremap bp :&lt;C-u&gt;!cd ~/src/octopress &amp;&amp; rake gen_deploy &amp;&amp; cd -&lt;CR&gt;
&quot;}}}
</code></pre></noscript></div>
</p>

<p>読めば分かる人はすぐに分かると思いますけど、一応簡単な使い方を説明しておきます。</p>

<p>QFixHowmを普通に使いたい時もあるので、Octopressと連携するときと簡単に切り替えられるようにしてあります。
qbと入力するとブログ用に、qmとすると通常の使い方にスイッチできます。</p>

<p>ブログ用に使うとき、,cと入力すればOctopressに合わせたファイルを新規に作成して開きます。
開いた状態は以下のようになって、すでにタイトル部分にカーソルが動いています。</p>

<p><img src="http://img828.imageshack.us/img828/4184/qfixhowm1.png"></p>

<p>タイトルを入力し必要ならカテゴリを入力し、ブログの内容をMarkdown形式で書いていきます。
ちなみにファイルを保存する度にdate: の項目は保存時の日時に自動で書き換えられます。
つまり、ファイル名は記事作成開始日時、ファイルのdate: 部分は最終更新日時になります。
出来上がりの具合が心配なら、<a href="https://github.com/thinca/vim-quickrun">quickrun</a>を使えば簡単にHTMLへの変換を確認できます。
Octopressのpreview機能は非常に重かったので使っていません。</p>

<p>記事を書き終えて投稿するときは、ノーマルモードでbpを入力すればいいだけです。
しばらくするとブログの方に反映されます。</p>

<p>過去記事を参照したい場合は、,lを入力すればタイトル付きで記事の一覧が出てきます。</p>

<p><img src="http://img339.imageshack.us/img339/2553/qfixhowm2.png"></p>

<p>真ん中のウィンドウに一覧が出ていて、カーソルのある位置のファイルのプレビューが一番下のウィンドウに出てきます。
非常にわかりやすいですね。
ローカルのファイル一覧を表示するだけで一々GitHubにアクセスもしないので高速ですね。
昔の記事は表示せず、最近の記事のみ表示したいなら、,mです。
エンター（リターン）キーを押すとファイルが開かれるので、記事の内容を修正したい場合は修正し、
再度、ノーマルモードでbpと入力すをすれば記事の更新は完了です。
他にもQFixHowmの様々な機能と連携させれば、いろんなことができると思います。</p>

<p><em>ね？簡単でしょ？</em></p>

<hr />

<h2>おわり</h2>

<p>ブログだけではなく、最近は大抵のことはvimで済ませるようにしています。
GoogleReaderも2chもvimからチェックしていますし、
www.alc.co.jpにもvimからアクセスしていますし、
Gistへのポストもvimからですし、GitHubへのpushもvimからですし、
twitterもvimからやっていて、Lingrもvimから覗いています。
おかげで、2GBしかメモリがない自分の環境でもメモリ使用量が節約できてvim様様です（笑）
コーディングのしやすさは言わずもがなですが、優秀なプラグイン作者がたくさんいて素晴らしいです。</p>

<p>純粋なvim記事ではなく、ウェブサービス系のプラグインのまとめ記事みたいなものも需要がありますかね。
次回の記事はそれにしようかなあ…。</p>
]]></content>
  </entry>
  
</feed>
